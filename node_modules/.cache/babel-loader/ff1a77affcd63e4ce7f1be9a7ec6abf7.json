{"remainingRequest":"/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/node_modules/babel-loader/lib/index.js!/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/src/store/modules/orders.js","dependencies":[{"path":"/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/src/store/modules/orders.js","mtime":1623291590875},{"path":"/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/src/store/modules/orders.js"],"names":["axios","actionHandler","initialSingleOrderState","_id","user","orderItems","shippingAddress","phone","status","totalPrice","state","orders","order","getters","getAllOrders","getSingleOrder","actions","fetchAllOrders","commit","rootState","get","headers","Authorization","users","loggedUser","token","data","console","log","fetchMyOrders","fetchUserOrders","userId","fetchSingleOrder","orderId","createOrder","cart","items","post","map","item","product","quantity","Object","keys","key","join","updateOrderStatus","patch","deleteOrder","dispatch","delete","mutations","resetAllOrders","setAllOrders","resetSingleOrder","setSingleOrder","forEach"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B;AAAA,SAAO;AACnCC,IAAAA,GAAG,EAAE,EAD8B;AAEnCC,IAAAA,IAAI,EAAE,EAF6B;AAGnCC,IAAAA,UAAU,EAAE,EAHuB;AAInCC,IAAAA,eAAe,EAAE,EAJkB;AAKnCC,IAAAA,KAAK,EAAE,EAL4B;AAMnCC,IAAAA,MAAM,EAAE,EAN2B;AAOnCC,IAAAA,UAAU,EAAE;AAPuB,GAAP;AAAA,CAAhC;;AAUA,IAAMC,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAE,EADE;AAEVC,EAAAA,KAAK,EAAEV,uBAAuB;AAFpB,CAAd;AAKA,IAAMW,OAAO,GAAG;AACZC,EAAAA,YAAY,EAAE,sBAAAJ,KAAK;AAAA,WAAIA,KAAK,CAACC,MAAV;AAAA,GADP;AAEZI,EAAAA,cAAc,EAAE,wBAAAL,KAAK;AAAA,WAAIA,KAAK,CAACE,KAAV;AAAA;AAFT,CAAhB;AAKA,IAAMI,OAAO,GAAG;AACZ;AACJ;AACA;AACA;AACIC,EAAAA,cAAc,EAAEhB,aAAa;AAAA,wEAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASiB,cAAAA,MAAT,QAASA,MAAT,EAAiBC,SAAjB,QAAiBA,SAAjB;AAC1BD,cAAAA,MAAM,CAAC,gBAAD,CAAN;AAD0B;AAAA,qBAGHlB,KAAK,CAACoB,GAAN,CAAU,SAAV,EAAqB;AACxCC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,mBAAYH,SAAS,CAACI,KAAV,CAAgBC,UAAhB,CAA2BC,KAAvC;AAAf;AAD+B,eAArB,CAHG;;AAAA;AAAA;AAGlBC,cAAAA,IAHkB,oBAGlBA,IAHkB;AAM1BC,cAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACA,IAAjB;AACAR,cAAAA,MAAM,CAAC,cAAD,EAAiBQ,IAAI,CAACA,IAAtB,CAAN;;AAR0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MALjB;;AAgBZ;AACJ;AACA;AACA;AACIG,EAAAA,aAAa,EAAE5B,aAAa;AAAA,wEAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASiB,cAAAA,MAAT,SAASA,MAAT,EAAiBC,SAAjB,SAAiBA,SAAjB;AACzBD,cAAAA,MAAM,CAAC,gBAAD,CAAN;AADyB;AAAA,qBAGFlB,KAAK,CAACoB,GAAN,kCAAoCD,SAAS,CAACI,KAAV,CAAgBC,UAAhB,CAA2BrB,GAA/D,GAAsE;AACzFkB,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,mBAAYH,SAAS,CAACI,KAAV,CAAgBC,UAAhB,CAA2BC,KAAvC;AAAf;AADgF,eAAtE,CAHE;;AAAA;AAAA;AAGjBC,cAAAA,IAHiB,qBAGjBA,IAHiB;AAOzBR,cAAAA,MAAM,CAAC,cAAD,EAAiBQ,IAAI,CAACA,IAAtB,CAAN;;AAPyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MApBhB;AA8BZI,EAAAA,eAAe,EAAE7B,aAAa;AAAA,wEAAC,yBAA8B8B,MAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASb,cAAAA,MAAT,SAASA,MAAT,EAAiBC,SAAjB,SAAiBA,SAAjB;AAC3BD,cAAAA,MAAM,CAAC,gBAAD,CAAN;AAD2B;AAAA,qBAGJlB,KAAK,CAACoB,GAAN,kCAAoCW,MAApC,GAA8C;AACjEV,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,mBAAYH,SAAS,CAACI,KAAV,CAAgBC,UAAhB,CAA2BC,KAAvC;AAAf;AADwD,eAA9C,CAHI;;AAAA;AAAA;AAGnBC,cAAAA,IAHmB,qBAGnBA,IAHmB;AAO3BR,cAAAA,MAAM,CAAC,cAAD,EAAiBQ,IAAI,CAACA,IAAtB,CAAN;;AAP2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MA9BlB;;AAwCZ;AACJ;AACA;AACA;AACIM,EAAAA,gBAAgB,EAAE/B,aAAa;AAAA,wEAAC,yBAA8BgC,OAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASf,cAAAA,MAAT,SAASA,MAAT,EAAiBC,SAAjB,SAAiBA,SAAjB;AAC5BD,cAAAA,MAAM,CAAC,kBAAD,CAAN;AAD4B;AAAA,qBAGLlB,KAAK,CAACoB,GAAN,mBAAqBa,OAArB,GAAgC;AACnDZ,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,mBAAYH,SAAS,CAACI,KAAV,CAAgBC,UAAhB,CAA2BC,KAAvC;AAAf;AAD0C,eAAhC,CAHK;;AAAA;AAAA;AAGpBC,cAAAA,IAHoB,qBAGpBA,IAHoB;AAO5BR,cAAAA,MAAM,CAAC,gBAAD,EAAmBQ,IAAI,CAACA,IAAxB,CAAN;;AAP4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MA5CnB;;AAsDZ;AACJ;AACA;AACA;AACIQ,EAAAA,WAAW,EAAEjC,aAAa;AAAA,yEAAC,yBAA8BM,KAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASW,cAAAA,MAAT,SAASA,MAAT,EAAiBC,SAAjB,SAAiBA,SAAjB;AAAA,gCACwBA,SAAS,CAACgB,IADlC,EACR9B,UADQ,mBACf+B,KADe,EACI9B,eADJ,mBACIA,eADJ;AAAA;AAAA,qBAGAN,KAAK,CAACqC,IAAN,CAAW,SAAX,EAAsB;AACzCjC,gBAAAA,IAAI,EAAEe,SAAS,CAACI,KAAV,CAAgBC,UAAhB,CAA2BrB,GADQ;AAEzCE,gBAAAA,UAAU,EAAEA,UAAU,CAACiC,GAAX,CAAe,UAAAC,IAAI,EAAI;AAC/B,yBAAO;AACHC,oBAAAA,OAAO,EAAED,IAAI,CAACC,OADX;AAEHC,oBAAAA,QAAQ,EAAEF,IAAI,CAACE;AAFZ,mBAAP;AAIH,iBALW,CAF6B;AAQzCnC,gBAAAA,eAAe,EAAEoC,MAAM,CAACC,IAAP,CAAYrC,eAAZ,EAA6BgC,GAA7B,CAAiC,UAAAM,GAAG;AAAA,mCAAOA,GAAP,cAActC,eAAe,CAACsC,GAAD,CAA7B;AAAA,iBAApC,EAA0EC,IAA1E,CAA+E,GAA/E,CARwB;AASzCtC,gBAAAA,KAAK,EAALA;AATyC,eAAtB,EAUpB;AACCc,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,mBAAYH,SAAS,CAACI,KAAV,CAAgBC,UAAhB,CAA2BC,KAAvC;AAAf;AADV,eAVoB,CAHA;;AAAA;AAAA;AAGfC,cAAAA,IAHe,qBAGfA,IAHe;AAiBvBR,cAAAA,MAAM,CAAC,gBAAD,EAAmBQ,IAAI,CAACA,IAAxB,CAAN;;AAjBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MA1Dd;AA8EZoB,EAAAA,iBAAiB,EAAE7C,aAAa;AAAA,yEAAC,0BAA8BW,KAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASM,cAAAA,MAAT,UAASA,MAAT,EAAiBC,SAAjB,UAAiBA,SAAjB;AACrBhB,cAAAA,GADqB,GACLS,KADK,CACrBT,GADqB,EAChBK,MADgB,GACLI,KADK,CAChBJ,MADgB;AAAA;AAAA,qBAENR,KAAK,CAAC+C,KAAN,mBAAuB5C,GAAvB,GACnB;AAAEK,gBAAAA,MAAM,EAANA;AAAF,eADmB,EAEnB;AAAEa,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,mBAAYH,SAAS,CAACI,KAAV,CAAgBC,UAAhB,CAA2BC,KAAvC;AAAf;AAAX,eAFmB,CAFM;;AAAA;AAAA;AAErBC,cAAAA,IAFqB,sBAErBA,IAFqB;AAO7BR,cAAAA,MAAM,CAAC,kBAAD,CAAN;AACAA,cAAAA,MAAM,CAAC,gBAAD,EAAmBQ,IAAI,CAACA,IAAxB,CAAN;;AAR6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MA9EpB;AAyFZsB,EAAAA,WAAW,EAAE/C,aAAa;AAAA,yEAAC,0BAAgCgC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASgB,cAAAA,QAAT,UAASA,QAAT,EAAmB9B,SAAnB,UAAmBA,SAAnB;AAAA;AAAA,qBACjBnB,KAAK,CAACkD,MAAN,mBAAwBjB,OAAxB,GAAmC;AACrCZ,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,mBAAYH,SAAS,CAACI,KAAV,CAAgBC,UAAhB,CAA2BC,KAAvC;AAAf;AAD4B,eAAnC,CADiB;;AAAA;AAKvBwB,cAAAA,QAAQ,CAAC,gBAAD,CAAR;;AALuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA;AAzFd,CAAhB;AAkGA,IAAME,SAAS,GAAG;AACdC,EAAAA,cAAc,EAAE,wBAAA1C,KAAK;AAAA,WAAIA,KAAK,CAACC,MAAN,GAAe,EAAnB;AAAA,GADP;AAEd0C,EAAAA,YAAY,EAAE,sBAAC3C,KAAD,EAAQC,MAAR;AAAA,WAAmBD,KAAK,CAACC,MAAN,GAAeA,MAAlC;AAAA,GAFA;AAId2C,EAAAA,gBAAgB,EAAE,0BAAA5C,KAAK;AAAA,WAAIA,KAAK,CAACE,KAAN,GAAcV,uBAAuB,EAAzC;AAAA,GAJT;AAKdqD,EAAAA,cAAc,EAAE,wBAAC7C,KAAD,EAAQE,KAAR;AAAA,WAAkB8B,MAAM,CAACC,IAAP,CAAY/B,KAAZ,EAAmB4C,OAAnB,CAA2B,UAAAZ,GAAG;AAAA,aAAIlC,KAAK,CAACE,KAAN,CAAYgC,GAAZ,IAAmBhC,KAAK,CAACgC,GAAD,CAA5B;AAAA,KAA9B,CAAlB;AAAA;AALF,CAAlB;AAQA,eAAe;AACXlC,EAAAA,KAAK,EAALA,KADW;AAEXG,EAAAA,OAAO,EAAPA,OAFW;AAGXG,EAAAA,OAAO,EAAPA,OAHW;AAIXmC,EAAAA,SAAS,EAATA;AAJW,CAAf","sourcesContent":["import axios from 'axios'\nimport actionHandler from '../actionHandler'\n\nconst initialSingleOrderState = () => ({\n    _id: '',\n    user: '',\n    orderItems: [],\n    shippingAddress: {},\n    phone: '',\n    status: '',\n    totalPrice: 0\n})\n\nconst state = {\n    orders: [],\n    order: initialSingleOrderState()\n}\n\nconst getters = {\n    getAllOrders: state => state.orders,\n    getSingleOrder: state => state.order\n}\n\nconst actions = {\n    /*\n     * @desc        Fetch all orders\n     * @access      Admin\n     */\n    fetchAllOrders: actionHandler(async ({ commit, rootState }) => {\n        commit('resetAllOrders')\n\n        const { data } = await axios.get('/orders', {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n        console.log(\"lalala\")\n        console.log(data.data)\n        commit('setAllOrders', data.data)\n    }),\n    \n    /*\n     * @desc        Fetch the logged in user orders\n     * @access      Private\n     */\n    fetchMyOrders: actionHandler(async ({ commit, rootState }) => {\n        commit('resetAllOrders')\n        \n        const { data } = await axios.get(`/orders/get/userorders/${rootState.users.loggedUser._id}`, {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n\n        commit('setAllOrders', data.data)\n    }),\n\n    fetchUserOrders: actionHandler(async ({ commit, rootState }, userId) => {\n        commit('resetAllOrders')\n        \n        const { data } = await axios.get(`/orders/get/userorders/${userId}`, {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n\n        commit('setAllOrders', data.data)\n    }),\n    \n    /*\n     * @desc        Fetch a user order by id\n     * @access      Private\n     */\n    fetchSingleOrder: actionHandler(async ({ commit, rootState }, orderId) => {\n        commit('resetSingleOrder')\n\n        const { data } = await axios.get(`/orders/${orderId}`, {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n\n        commit('setSingleOrder', data.data)\n    }),\n    \n    /*\n     * @desc        Creates a new user order\n     * @access      Private\n     */\n    createOrder: actionHandler(async ({ commit, rootState }, phone) => {\n        const { items: orderItems, shippingAddress } = rootState.cart\n\n        const { data } = await axios.post('/orders', {\n            user: rootState.users.loggedUser._id,\n            orderItems: orderItems.map(item => {\n                return {\n                    product: item.product,\n                    quantity: item.quantity\n                }\n            }),\n            shippingAddress: Object.keys(shippingAddress).map(key => `${key}=${shippingAddress[key]}`).join(\"&\"),\n            phone\n        }, {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n\n        commit('setSingleOrder', data.data)\n    }),\n\n    updateOrderStatus: actionHandler(async ({ commit, rootState }, order) => {        \n        const { _id, status } = order\n        const { data } = await axios.patch(`/orders/${_id}`,\n            { status },\n            { headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }}\n        )\n\n        commit('resetSingleOrder')\n        commit('setSingleOrder', data.data)\n    }),\n\n    deleteOrder: actionHandler(async ({ dispatch, rootState }, orderId) => {\n        await axios.delete(`/orders/${orderId}`, {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n\n        dispatch('fetchAllOrders')\n    })\n}\n\nconst mutations = {\n    resetAllOrders: state => state.orders = [],\n    setAllOrders: (state, orders) => state.orders = orders,\n    \n    resetSingleOrder: state => state.order = initialSingleOrderState(),\n    setSingleOrder: (state, order) => Object.keys(order).forEach(key => state.order[key] = order[key])\n}\n\nexport default {\n    state,\n    getters,\n    actions,\n    mutations\n}\n"]}]}