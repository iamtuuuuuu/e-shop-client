{"remainingRequest":"/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/node_modules/babel-loader/lib/index.js!/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/src/store/modules/orders.js","dependencies":[{"path":"/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/src/store/modules/orders.js","mtime":1622513457891},{"path":"/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/vuanhtu/Desktop/workspace/vue/eshop/frontend/src/store/modules/orders.js"],"names":["axios","actionHandler","initialSingleOrderState","_id","user","orderItems","shippingAddress","phone","status","totalPrice","state","orders","order","getters","getAllOrders","getSingleOrder","actions","fetchAllOrders","commit","rootState","userId","undefined","get","headers","Authorization","users","loggedUser","token","data","fetchMyOrders","fetchSingleOrder","orderId","createOrder","cart","items","post","map","item","product","quantity","Object","keys","key","join","mutations","resetAllOrders","setAllOrders","resetSingleOrder","setSingleOrder","forEach"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport actionHandler from '../actionHandler'\n\nconst initialSingleOrderState = () => ({\n    _id: '',\n    user: '',\n    orderItems: [],\n    shippingAddress: {},\n    phone: '',\n    status: '',\n    totalPrice: 0\n})\n\nconst state = {\n    orders: [],\n    order: initialSingleOrderState()\n}\n\nconst getters = {\n    getAllOrders: state => state.orders,\n    getSingleOrder: state => state.order\n}\n\nconst actions = {\n    /*\n     * @desc        Fetch all orders\n     * @access      Admin\n     */\n    fetchAllOrders: actionHandler(async ({ commit, rootState }, userId = undefined) => {\n        commit('resetAllOrders')\n\n        const { data } = await axios.get(`/orders${userId ? `/get/userorders/${userId}` : ''}/orders`, {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n\n        commit('setAllOrders', data.data)\n    }),\n    \n    /*\n     * @desc        Fetch the logged in user orders\n     * @access      Private\n     */\n    fetchMyOrders: actionHandler(async ({ commit, rootState }) => {\n        commit('resetAllOrders')\n        \n        const { data } = await axios.get(`/get/userorders/${rootState.users.loggedUser._id}`, {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n\n        commit('setAllOrders', data.data)\n    }),\n    \n    /*\n     * @desc        Fetch a user order by id\n     * @access      Private\n     */\n    fetchSingleOrder: actionHandler(async ({ commit, rootState }, orderId) => {\n        commit('resetSingleOrder')\n\n        const { data } = await axios.get(`/orders/${orderId}`, {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n\n        commit('setSingleOrder', data.data)\n    }),\n    \n    /*\n     * @desc        Creates a new user order\n     * @access      Private\n     */\n    createOrder: actionHandler(async ({ commit, rootState }, phone) => {\n        const { items: orderItems, shippingAddress } = rootState.cart\n\n        const { data } = await axios.post('/orders', {\n            user: rootState.users.loggedUser._id,\n            orderItems: orderItems.map(item => {\n                return {\n                    product: item.product,\n                    quantity: item.quantity\n                }\n            }),\n            shippingAddress: Object.keys(shippingAddress).map(key => `${key}=${shippingAddress[key]}`).join(\"&\"),\n            phone\n        }, {\n            headers: { Authorization: `Bearer ${rootState.users.loggedUser.token}` }\n        })\n\n        commit('setSingleOrder', data.data)\n    }),\n}\n\nconst mutations = {\n    resetAllOrders: state => state.orders = [],\n    setAllOrders: (state, orders) => state.orders = orders,\n    \n    resetSingleOrder: state => state.order = initialSingleOrderState(),\n    setSingleOrder: (state, order) => Object.keys(order).forEach(key => state.order[key] = order[key])\n}\n\nexport default {\n    state,\n    getters,\n    actions,\n    mutations\n}\n"]}]}