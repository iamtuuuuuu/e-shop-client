{"version":3,"sources":["webpack:///./src/composables/useProducts.js"],"names":["useProducts","store","useStore","route","useRoute","router","useRouter","success","ref","products","computed","getters","product","setProducts","dispatch","setProduct","params","id","createProduct","productId","push","updateProduct","value","deleteProduct","window","confirm","addToCart","qty","quantity","Number","name","removeFromCart","isLoading","error"],"mappings":"oRAIe,SAASA,IACpB,IAAMC,EAAQC,iBACRC,EAAQC,iBACRC,EAASC,iBAETC,EAAUC,gBAAI,GACdC,EAAWC,gBAAS,kBAAMT,EAAMU,QAAQ,qBACxCC,EAAUF,gBAAS,kBAAMT,EAAMU,QAAQ,uBAKvCE,EAAc,kBAAMZ,EAAMa,SAAS,qBACnCC,EAAa,kBAAMd,EAAMa,SAAS,qBAAsBX,EAAMa,OAAOC,KACrEC,EAAa,yDAAG,oHACMjB,EAAMa,SAAS,iBADrB,OACZK,EADY,OAGdA,GAAWd,EAAOe,KAAP,0BAA+BD,IAH5B,2CAAH,qDAKbE,EAAa,yDAAG,WAAMT,GAAN,iGACIX,EAAMa,SAAS,gBAAiBF,GADpC,OAClBL,EAAQe,MADU,kDAAH,sDAGbC,EAAgB,SAAAJ,GACdK,OAAOC,QAAP,mDAA2DN,KAAclB,EAAMa,SAAS,gBAAiBK,IAM3GO,EAAY,SAACT,GAAgB,IAAZU,EAAY,uDAAN,EACzB1B,EAAMa,SAAS,UAAW,CACtBG,KACAW,SAAUC,OAAOF,KAErBtB,EAAOe,KAAK,CAAEU,KAAM,UAElBC,EAAiB,SAAAd,GAAE,OAAIhB,EAAMa,SAAS,aAAcG,IAE1D,MAAO,CACHV,UACAE,WACAG,UAEAC,cACAE,aACAG,gBACAG,gBACAE,gBAEAG,YACAK,iBAEAC,UAAWtB,gBAAS,kBAAMT,EAAMU,QAAQ,sBACxCsB,MAAOvB,gBAAS,kBAAMT,EAAMU,QAAQ","file":"js/admin-products~admin-products-details~cart-view~home-view~product-view.9f9d0d2b.js","sourcesContent":["import { computed, ref } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { useStore } from 'vuex'\n\nexport default function useProducts() {\n    const store = useStore()\n    const route = useRoute()\n    const router = useRouter()\n\n    const success = ref(false)\n    const products = computed(() => store.getters['getAllProducts'])\n    const product = computed(() => store.getters['getSingleProduct'])\n\n    /**\n     * Product CRUD\n     */\n    const setProducts = () => store.dispatch('fetchAllProducts')\n    const setProduct = () => store.dispatch('fetchSingleProduct', route.params.id)\n    const createProduct = async () => {\n        const productId = await store.dispatch('createProduct')\n        \n        if (productId) router.push(`/admin/products/${productId}`)\n    }\n    const updateProduct = async product => {\n        success.value = await store.dispatch('updateProduct', product)\n    }\n    const deleteProduct = productId => {\n        if (window.confirm(`Do you really want to remove the product ${productId}`)) store.dispatch('deleteProduct', productId)\n    }\n    \n    /**\n     * Add and Remove product from cart\n     */\n    const addToCart = (id, qty = 1) => {\n        store.dispatch('addItem', {\n            id,\n            quantity: Number(qty)\n        })\n        router.push({ name: 'cart' })\n    }\n    const removeFromCart = id => store.dispatch('removeItem', id)\n\n    return {\n        success,\n        products,\n        product,\n\n        setProducts,\n        setProduct,\n        createProduct,\n        updateProduct,\n        deleteProduct,\n\n        addToCart,\n        removeFromCart,\n\n        isLoading: computed(() => store.getters['utils/isLoading']),\n        error: computed(() => store.getters['utils/getError'])\n    }\n}"],"sourceRoot":""}