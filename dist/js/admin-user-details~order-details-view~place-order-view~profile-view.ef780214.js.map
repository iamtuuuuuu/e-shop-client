{"version":3,"sources":["webpack:///./src/composables/useOrders.js"],"names":["useOrders","store","useStore","router","useRouter","orders","computed","getters","order","fetchAllOrders","userId","undefined","dispatch","fetchMyOrders","fetchSingleOrder","orderId","placeOrder","cartSummary","push","name","params","id","value","_id","payOrder","details","fetchPaypalClientId","isLoading","error"],"mappings":"uQAIe,SAASA,IACpB,IAAMC,EAAQC,iBACRC,EAASC,iBAETC,EAASC,gBAAS,kBAAML,EAAMM,QAAQ,mBACtCC,EAAQF,gBAAS,kBAAML,EAAMM,QAAQ,qBAErCE,EAAiB,eAACC,EAAD,4DAAUC,EAAV,OAAwBV,EAAMW,SAAS,iBAAkBF,IAC1EG,EAAgB,kBAAMZ,EAAMW,SAAS,kBACrCE,EAAmB,SAAAC,GAAO,OAAId,EAAMW,SAAS,mBAAoBG,IAEjEC,EAAU,yDAAG,WAAMC,GAAN,iGACLhB,EAAMW,SAAS,cAAeK,GADzB,kCACuCd,EAAOe,KAAK,CAAEC,KAAM,cAAeC,OAAQ,CAAEC,GAAIb,EAAMc,MAAMC,OADpG,2CAAH,sDAIVC,EAAW,SAACT,EAASU,GAAV,OAAsBxB,EAAMW,SAAS,WAAY,CAAEG,UAASU,aACvEC,EAAsB,kBAAMzB,EAAMW,SAAS,mBAGjD,MAAO,CACHP,SACAG,QAEAC,iBACAI,gBACAC,mBACAE,aACAQ,WACAE,sBAEAC,UAAWrB,gBAAS,kBAAML,EAAMM,QAAQ,sBACxCqB,MAAOtB,gBAAS,kBAAML,EAAMM,QAAQ","file":"js/admin-user-details~order-details-view~place-order-view~profile-view.ef780214.js","sourcesContent":["import { computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\n\nexport default function useOrders() {\n    const store = useStore()\n    const router = useRouter()\n\n    const orders = computed(() => store.getters['getAllOrders'])\n    const order = computed(() => store.getters['getSingleOrder'])\n\n    const fetchAllOrders = (userId = undefined) => store.dispatch('fetchAllOrders', userId)\n    const fetchMyOrders = () => store.dispatch('fetchMyOrders')\n    const fetchSingleOrder = orderId => store.dispatch('fetchSingleOrder', orderId)\n    \n    const placeOrder = async cartSummary => {\n        if (await store.dispatch('createOrder', cartSummary)) router.push({ name: 'orders.show', params: { id: order.value._id }})\n    }\n    \n    const payOrder = (orderId, details) => store.dispatch('payOrder', { orderId, details })\n    const fetchPaypalClientId = () => store.dispatch('paypalClientId')\n\n    \n    return {\n        orders,\n        order,\n\n        fetchAllOrders,\n        fetchMyOrders,\n        fetchSingleOrder,\n        placeOrder,\n        payOrder,\n        fetchPaypalClientId,\n\n        isLoading: computed(() => store.getters['utils/isLoading']),\n        error: computed(() => store.getters['utils/getError'])\n    }\n}\n"],"sourceRoot":""}